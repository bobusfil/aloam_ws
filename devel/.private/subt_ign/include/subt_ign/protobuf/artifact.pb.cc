// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: artifact.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "artifact.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace subt {
namespace msgs {

namespace {

const ::google::protobuf::Descriptor* Artifact_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Artifact_reflection_ = NULL;
const ::google::protobuf::Descriptor* ArtifactScore_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ArtifactScore_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_artifact_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_artifact_2eproto() {
  protobuf_AddDesc_artifact_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "artifact.proto");
  GOOGLE_CHECK(file != NULL);
  Artifact_descriptor_ = file->message_type(0);
  static const int Artifact_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Artifact, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Artifact, pose_),
  };
  Artifact_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Artifact_descriptor_,
      Artifact::default_instance_,
      Artifact_offsets_,
      -1,
      -1,
      -1,
      sizeof(Artifact),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Artifact, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Artifact, _is_default_instance_));
  ArtifactScore_descriptor_ = file->message_type(1);
  static const int ArtifactScore_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArtifactScore, report_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArtifactScore, artifact_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArtifactScore, submitted_datetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArtifactScore, sim_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArtifactScore, run_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArtifactScore, report_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArtifactScore, score_change_),
  };
  ArtifactScore_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ArtifactScore_descriptor_,
      ArtifactScore::default_instance_,
      ArtifactScore_offsets_,
      -1,
      -1,
      -1,
      sizeof(ArtifactScore),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArtifactScore, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArtifactScore, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_artifact_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Artifact_descriptor_, &Artifact::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ArtifactScore_descriptor_, &ArtifactScore::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_artifact_2eproto() {
  delete Artifact::default_instance_;
  delete Artifact_reflection_;
  delete ArtifactScore::default_instance_;
  delete ArtifactScore_reflection_;
}

void protobuf_AddDesc_artifact_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_artifact_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::ignition::msgs::protobuf_AddDesc_ignition_2fmsgs_2fpose_2eproto();
  ::ignition::msgs::protobuf_AddDesc_ignition_2fmsgs_2ftime_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016artifact.proto\022\tsubt.msgs\032\030ignition/ms"
    "gs/pose.proto\032\030ignition/msgs/time.proto\""
    ";\n\010Artifact\022\014\n\004type\030\001 \001(\r\022!\n\004pose\030\002 \001(\0132"
    "\023.ignition.msgs.Pose\"\333\001\n\rArtifactScore\022\021"
    "\n\treport_id\030\001 \001(\r\022%\n\010artifact\030\002 \001(\0132\023.su"
    "bt.msgs.Artifact\022/\n\022submitted_datetime\030\003"
    " \001(\0132\023.ignition.msgs.Time\022%\n\010sim_time\030\004 "
    "\001(\0132\023.ignition.msgs.Time\022\013\n\003run\030\005 \001(\r\022\025\n"
    "\rreport_status\030\006 \001(\t\022\024\n\014score_change\030\007 \001"
    "(\005b\006proto3", 370);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "artifact.proto", &protobuf_RegisterTypes);
  Artifact::default_instance_ = new Artifact();
  ArtifactScore::default_instance_ = new ArtifactScore();
  Artifact::default_instance_->InitAsDefaultInstance();
  ArtifactScore::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_artifact_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_artifact_2eproto {
  StaticDescriptorInitializer_artifact_2eproto() {
    protobuf_AddDesc_artifact_2eproto();
  }
} static_descriptor_initializer_artifact_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Artifact::kTypeFieldNumber;
const int Artifact::kPoseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Artifact::Artifact()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:subt.msgs.Artifact)
}

void Artifact::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  pose_ = const_cast< ::ignition::msgs::Pose*>(&::ignition::msgs::Pose::default_instance());
}

Artifact::Artifact(const Artifact& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:subt.msgs.Artifact)
}

void Artifact::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  type_ = 0u;
  pose_ = NULL;
}

Artifact::~Artifact() {
  // @@protoc_insertion_point(destructor:subt.msgs.Artifact)
  SharedDtor();
}

void Artifact::SharedDtor() {
  if (this != default_instance_) {
    delete pose_;
  }
}

void Artifact::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Artifact::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Artifact_descriptor_;
}

const Artifact& Artifact::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artifact_2eproto();
  return *default_instance_;
}

Artifact* Artifact::default_instance_ = NULL;

Artifact* Artifact::New(::google::protobuf::Arena* arena) const {
  Artifact* n = new Artifact;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Artifact::Clear() {
// @@protoc_insertion_point(message_clear_start:subt.msgs.Artifact)
  type_ = 0u;
  if (GetArenaNoVirtual() == NULL && pose_ != NULL) delete pose_;
  pose_ = NULL;
}

bool Artifact::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:subt.msgs.Artifact)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_pose;
        break;
      }

      // optional .ignition.msgs.Pose pose = 2;
      case 2: {
        if (tag == 18) {
         parse_pose:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pose()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:subt.msgs.Artifact)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:subt.msgs.Artifact)
  return false;
#undef DO_
}

void Artifact::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:subt.msgs.Artifact)
  // optional uint32 type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // optional .ignition.msgs.Pose pose = 2;
  if (this->has_pose()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->pose_, output);
  }

  // @@protoc_insertion_point(serialize_end:subt.msgs.Artifact)
}

::google::protobuf::uint8* Artifact::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:subt.msgs.Artifact)
  // optional uint32 type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // optional .ignition.msgs.Pose pose = 2;
  if (this->has_pose()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->pose_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:subt.msgs.Artifact)
  return target;
}

int Artifact::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:subt.msgs.Artifact)
  int total_size = 0;

  // optional uint32 type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());
  }

  // optional .ignition.msgs.Pose pose = 2;
  if (this->has_pose()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pose_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Artifact::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:subt.msgs.Artifact)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Artifact* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Artifact>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:subt.msgs.Artifact)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:subt.msgs.Artifact)
    MergeFrom(*source);
  }
}

void Artifact::MergeFrom(const Artifact& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:subt.msgs.Artifact)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.has_pose()) {
    mutable_pose()->::ignition::msgs::Pose::MergeFrom(from.pose());
  }
}

void Artifact::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:subt.msgs.Artifact)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Artifact::CopyFrom(const Artifact& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:subt.msgs.Artifact)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Artifact::IsInitialized() const {

  return true;
}

void Artifact::Swap(Artifact* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Artifact::InternalSwap(Artifact* other) {
  std::swap(type_, other->type_);
  std::swap(pose_, other->pose_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Artifact::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Artifact_descriptor_;
  metadata.reflection = Artifact_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Artifact

// optional uint32 type = 1;
void Artifact::clear_type() {
  type_ = 0u;
}
 ::google::protobuf::uint32 Artifact::type() const {
  // @@protoc_insertion_point(field_get:subt.msgs.Artifact.type)
  return type_;
}
 void Artifact::set_type(::google::protobuf::uint32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:subt.msgs.Artifact.type)
}

// optional .ignition.msgs.Pose pose = 2;
bool Artifact::has_pose() const {
  return !_is_default_instance_ && pose_ != NULL;
}
void Artifact::clear_pose() {
  if (GetArenaNoVirtual() == NULL && pose_ != NULL) delete pose_;
  pose_ = NULL;
}
const ::ignition::msgs::Pose& Artifact::pose() const {
  // @@protoc_insertion_point(field_get:subt.msgs.Artifact.pose)
  return pose_ != NULL ? *pose_ : *default_instance_->pose_;
}
::ignition::msgs::Pose* Artifact::mutable_pose() {
  
  if (pose_ == NULL) {
    pose_ = new ::ignition::msgs::Pose;
  }
  // @@protoc_insertion_point(field_mutable:subt.msgs.Artifact.pose)
  return pose_;
}
::ignition::msgs::Pose* Artifact::release_pose() {
  // @@protoc_insertion_point(field_release:subt.msgs.Artifact.pose)
  
  ::ignition::msgs::Pose* temp = pose_;
  pose_ = NULL;
  return temp;
}
void Artifact::set_allocated_pose(::ignition::msgs::Pose* pose) {
  delete pose_;
  pose_ = pose;
  if (pose) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:subt.msgs.Artifact.pose)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ArtifactScore::kReportIdFieldNumber;
const int ArtifactScore::kArtifactFieldNumber;
const int ArtifactScore::kSubmittedDatetimeFieldNumber;
const int ArtifactScore::kSimTimeFieldNumber;
const int ArtifactScore::kRunFieldNumber;
const int ArtifactScore::kReportStatusFieldNumber;
const int ArtifactScore::kScoreChangeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ArtifactScore::ArtifactScore()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:subt.msgs.ArtifactScore)
}

void ArtifactScore::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  artifact_ = const_cast< ::subt::msgs::Artifact*>(&::subt::msgs::Artifact::default_instance());
  submitted_datetime_ = const_cast< ::ignition::msgs::Time*>(&::ignition::msgs::Time::default_instance());
  sim_time_ = const_cast< ::ignition::msgs::Time*>(&::ignition::msgs::Time::default_instance());
}

ArtifactScore::ArtifactScore(const ArtifactScore& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:subt.msgs.ArtifactScore)
}

void ArtifactScore::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  report_id_ = 0u;
  artifact_ = NULL;
  submitted_datetime_ = NULL;
  sim_time_ = NULL;
  run_ = 0u;
  report_status_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  score_change_ = 0;
}

ArtifactScore::~ArtifactScore() {
  // @@protoc_insertion_point(destructor:subt.msgs.ArtifactScore)
  SharedDtor();
}

void ArtifactScore::SharedDtor() {
  report_status_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete artifact_;
    delete submitted_datetime_;
    delete sim_time_;
  }
}

void ArtifactScore::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ArtifactScore::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArtifactScore_descriptor_;
}

const ArtifactScore& ArtifactScore::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artifact_2eproto();
  return *default_instance_;
}

ArtifactScore* ArtifactScore::default_instance_ = NULL;

ArtifactScore* ArtifactScore::New(::google::protobuf::Arena* arena) const {
  ArtifactScore* n = new ArtifactScore;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ArtifactScore::Clear() {
// @@protoc_insertion_point(message_clear_start:subt.msgs.ArtifactScore)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ArtifactScore, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ArtifactScore*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(report_id_, run_);
  if (GetArenaNoVirtual() == NULL && artifact_ != NULL) delete artifact_;
  artifact_ = NULL;
  if (GetArenaNoVirtual() == NULL && submitted_datetime_ != NULL) delete submitted_datetime_;
  submitted_datetime_ = NULL;
  if (GetArenaNoVirtual() == NULL && sim_time_ != NULL) delete sim_time_;
  sim_time_ = NULL;
  report_status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  score_change_ = 0;

#undef ZR_HELPER_
#undef ZR_

}

bool ArtifactScore::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:subt.msgs.ArtifactScore)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 report_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &report_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_artifact;
        break;
      }

      // optional .subt.msgs.Artifact artifact = 2;
      case 2: {
        if (tag == 18) {
         parse_artifact:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_artifact()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_submitted_datetime;
        break;
      }

      // optional .ignition.msgs.Time submitted_datetime = 3;
      case 3: {
        if (tag == 26) {
         parse_submitted_datetime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_submitted_datetime()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_sim_time;
        break;
      }

      // optional .ignition.msgs.Time sim_time = 4;
      case 4: {
        if (tag == 34) {
         parse_sim_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sim_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_run;
        break;
      }

      // optional uint32 run = 5;
      case 5: {
        if (tag == 40) {
         parse_run:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &run_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_report_status;
        break;
      }

      // optional string report_status = 6;
      case 6: {
        if (tag == 50) {
         parse_report_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_report_status()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->report_status().data(), this->report_status().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "subt.msgs.ArtifactScore.report_status"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_score_change;
        break;
      }

      // optional int32 score_change = 7;
      case 7: {
        if (tag == 56) {
         parse_score_change:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_change_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:subt.msgs.ArtifactScore)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:subt.msgs.ArtifactScore)
  return false;
#undef DO_
}

void ArtifactScore::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:subt.msgs.ArtifactScore)
  // optional uint32 report_id = 1;
  if (this->report_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->report_id(), output);
  }

  // optional .subt.msgs.Artifact artifact = 2;
  if (this->has_artifact()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->artifact_, output);
  }

  // optional .ignition.msgs.Time submitted_datetime = 3;
  if (this->has_submitted_datetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->submitted_datetime_, output);
  }

  // optional .ignition.msgs.Time sim_time = 4;
  if (this->has_sim_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->sim_time_, output);
  }

  // optional uint32 run = 5;
  if (this->run() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->run(), output);
  }

  // optional string report_status = 6;
  if (this->report_status().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->report_status().data(), this->report_status().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "subt.msgs.ArtifactScore.report_status");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->report_status(), output);
  }

  // optional int32 score_change = 7;
  if (this->score_change() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->score_change(), output);
  }

  // @@protoc_insertion_point(serialize_end:subt.msgs.ArtifactScore)
}

::google::protobuf::uint8* ArtifactScore::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:subt.msgs.ArtifactScore)
  // optional uint32 report_id = 1;
  if (this->report_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->report_id(), target);
  }

  // optional .subt.msgs.Artifact artifact = 2;
  if (this->has_artifact()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->artifact_, false, target);
  }

  // optional .ignition.msgs.Time submitted_datetime = 3;
  if (this->has_submitted_datetime()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->submitted_datetime_, false, target);
  }

  // optional .ignition.msgs.Time sim_time = 4;
  if (this->has_sim_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->sim_time_, false, target);
  }

  // optional uint32 run = 5;
  if (this->run() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->run(), target);
  }

  // optional string report_status = 6;
  if (this->report_status().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->report_status().data(), this->report_status().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "subt.msgs.ArtifactScore.report_status");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->report_status(), target);
  }

  // optional int32 score_change = 7;
  if (this->score_change() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->score_change(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:subt.msgs.ArtifactScore)
  return target;
}

int ArtifactScore::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:subt.msgs.ArtifactScore)
  int total_size = 0;

  // optional uint32 report_id = 1;
  if (this->report_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->report_id());
  }

  // optional .subt.msgs.Artifact artifact = 2;
  if (this->has_artifact()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->artifact_);
  }

  // optional .ignition.msgs.Time submitted_datetime = 3;
  if (this->has_submitted_datetime()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->submitted_datetime_);
  }

  // optional .ignition.msgs.Time sim_time = 4;
  if (this->has_sim_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->sim_time_);
  }

  // optional uint32 run = 5;
  if (this->run() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->run());
  }

  // optional string report_status = 6;
  if (this->report_status().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->report_status());
  }

  // optional int32 score_change = 7;
  if (this->score_change() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->score_change());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArtifactScore::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:subt.msgs.ArtifactScore)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ArtifactScore* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ArtifactScore>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:subt.msgs.ArtifactScore)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:subt.msgs.ArtifactScore)
    MergeFrom(*source);
  }
}

void ArtifactScore::MergeFrom(const ArtifactScore& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:subt.msgs.ArtifactScore)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.report_id() != 0) {
    set_report_id(from.report_id());
  }
  if (from.has_artifact()) {
    mutable_artifact()->::subt::msgs::Artifact::MergeFrom(from.artifact());
  }
  if (from.has_submitted_datetime()) {
    mutable_submitted_datetime()->::ignition::msgs::Time::MergeFrom(from.submitted_datetime());
  }
  if (from.has_sim_time()) {
    mutable_sim_time()->::ignition::msgs::Time::MergeFrom(from.sim_time());
  }
  if (from.run() != 0) {
    set_run(from.run());
  }
  if (from.report_status().size() > 0) {

    report_status_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.report_status_);
  }
  if (from.score_change() != 0) {
    set_score_change(from.score_change());
  }
}

void ArtifactScore::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:subt.msgs.ArtifactScore)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArtifactScore::CopyFrom(const ArtifactScore& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:subt.msgs.ArtifactScore)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArtifactScore::IsInitialized() const {

  return true;
}

void ArtifactScore::Swap(ArtifactScore* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ArtifactScore::InternalSwap(ArtifactScore* other) {
  std::swap(report_id_, other->report_id_);
  std::swap(artifact_, other->artifact_);
  std::swap(submitted_datetime_, other->submitted_datetime_);
  std::swap(sim_time_, other->sim_time_);
  std::swap(run_, other->run_);
  report_status_.Swap(&other->report_status_);
  std::swap(score_change_, other->score_change_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ArtifactScore::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ArtifactScore_descriptor_;
  metadata.reflection = ArtifactScore_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ArtifactScore

// optional uint32 report_id = 1;
void ArtifactScore::clear_report_id() {
  report_id_ = 0u;
}
 ::google::protobuf::uint32 ArtifactScore::report_id() const {
  // @@protoc_insertion_point(field_get:subt.msgs.ArtifactScore.report_id)
  return report_id_;
}
 void ArtifactScore::set_report_id(::google::protobuf::uint32 value) {
  
  report_id_ = value;
  // @@protoc_insertion_point(field_set:subt.msgs.ArtifactScore.report_id)
}

// optional .subt.msgs.Artifact artifact = 2;
bool ArtifactScore::has_artifact() const {
  return !_is_default_instance_ && artifact_ != NULL;
}
void ArtifactScore::clear_artifact() {
  if (GetArenaNoVirtual() == NULL && artifact_ != NULL) delete artifact_;
  artifact_ = NULL;
}
const ::subt::msgs::Artifact& ArtifactScore::artifact() const {
  // @@protoc_insertion_point(field_get:subt.msgs.ArtifactScore.artifact)
  return artifact_ != NULL ? *artifact_ : *default_instance_->artifact_;
}
::subt::msgs::Artifact* ArtifactScore::mutable_artifact() {
  
  if (artifact_ == NULL) {
    artifact_ = new ::subt::msgs::Artifact;
  }
  // @@protoc_insertion_point(field_mutable:subt.msgs.ArtifactScore.artifact)
  return artifact_;
}
::subt::msgs::Artifact* ArtifactScore::release_artifact() {
  // @@protoc_insertion_point(field_release:subt.msgs.ArtifactScore.artifact)
  
  ::subt::msgs::Artifact* temp = artifact_;
  artifact_ = NULL;
  return temp;
}
void ArtifactScore::set_allocated_artifact(::subt::msgs::Artifact* artifact) {
  delete artifact_;
  artifact_ = artifact;
  if (artifact) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:subt.msgs.ArtifactScore.artifact)
}

// optional .ignition.msgs.Time submitted_datetime = 3;
bool ArtifactScore::has_submitted_datetime() const {
  return !_is_default_instance_ && submitted_datetime_ != NULL;
}
void ArtifactScore::clear_submitted_datetime() {
  if (GetArenaNoVirtual() == NULL && submitted_datetime_ != NULL) delete submitted_datetime_;
  submitted_datetime_ = NULL;
}
const ::ignition::msgs::Time& ArtifactScore::submitted_datetime() const {
  // @@protoc_insertion_point(field_get:subt.msgs.ArtifactScore.submitted_datetime)
  return submitted_datetime_ != NULL ? *submitted_datetime_ : *default_instance_->submitted_datetime_;
}
::ignition::msgs::Time* ArtifactScore::mutable_submitted_datetime() {
  
  if (submitted_datetime_ == NULL) {
    submitted_datetime_ = new ::ignition::msgs::Time;
  }
  // @@protoc_insertion_point(field_mutable:subt.msgs.ArtifactScore.submitted_datetime)
  return submitted_datetime_;
}
::ignition::msgs::Time* ArtifactScore::release_submitted_datetime() {
  // @@protoc_insertion_point(field_release:subt.msgs.ArtifactScore.submitted_datetime)
  
  ::ignition::msgs::Time* temp = submitted_datetime_;
  submitted_datetime_ = NULL;
  return temp;
}
void ArtifactScore::set_allocated_submitted_datetime(::ignition::msgs::Time* submitted_datetime) {
  delete submitted_datetime_;
  submitted_datetime_ = submitted_datetime;
  if (submitted_datetime) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:subt.msgs.ArtifactScore.submitted_datetime)
}

// optional .ignition.msgs.Time sim_time = 4;
bool ArtifactScore::has_sim_time() const {
  return !_is_default_instance_ && sim_time_ != NULL;
}
void ArtifactScore::clear_sim_time() {
  if (GetArenaNoVirtual() == NULL && sim_time_ != NULL) delete sim_time_;
  sim_time_ = NULL;
}
const ::ignition::msgs::Time& ArtifactScore::sim_time() const {
  // @@protoc_insertion_point(field_get:subt.msgs.ArtifactScore.sim_time)
  return sim_time_ != NULL ? *sim_time_ : *default_instance_->sim_time_;
}
::ignition::msgs::Time* ArtifactScore::mutable_sim_time() {
  
  if (sim_time_ == NULL) {
    sim_time_ = new ::ignition::msgs::Time;
  }
  // @@protoc_insertion_point(field_mutable:subt.msgs.ArtifactScore.sim_time)
  return sim_time_;
}
::ignition::msgs::Time* ArtifactScore::release_sim_time() {
  // @@protoc_insertion_point(field_release:subt.msgs.ArtifactScore.sim_time)
  
  ::ignition::msgs::Time* temp = sim_time_;
  sim_time_ = NULL;
  return temp;
}
void ArtifactScore::set_allocated_sim_time(::ignition::msgs::Time* sim_time) {
  delete sim_time_;
  sim_time_ = sim_time;
  if (sim_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:subt.msgs.ArtifactScore.sim_time)
}

// optional uint32 run = 5;
void ArtifactScore::clear_run() {
  run_ = 0u;
}
 ::google::protobuf::uint32 ArtifactScore::run() const {
  // @@protoc_insertion_point(field_get:subt.msgs.ArtifactScore.run)
  return run_;
}
 void ArtifactScore::set_run(::google::protobuf::uint32 value) {
  
  run_ = value;
  // @@protoc_insertion_point(field_set:subt.msgs.ArtifactScore.run)
}

// optional string report_status = 6;
void ArtifactScore::clear_report_status() {
  report_status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ArtifactScore::report_status() const {
  // @@protoc_insertion_point(field_get:subt.msgs.ArtifactScore.report_status)
  return report_status_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ArtifactScore::set_report_status(const ::std::string& value) {
  
  report_status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:subt.msgs.ArtifactScore.report_status)
}
 void ArtifactScore::set_report_status(const char* value) {
  
  report_status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:subt.msgs.ArtifactScore.report_status)
}
 void ArtifactScore::set_report_status(const char* value, size_t size) {
  
  report_status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:subt.msgs.ArtifactScore.report_status)
}
 ::std::string* ArtifactScore::mutable_report_status() {
  
  // @@protoc_insertion_point(field_mutable:subt.msgs.ArtifactScore.report_status)
  return report_status_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ArtifactScore::release_report_status() {
  // @@protoc_insertion_point(field_release:subt.msgs.ArtifactScore.report_status)
  
  return report_status_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ArtifactScore::set_allocated_report_status(::std::string* report_status) {
  if (report_status != NULL) {
    
  } else {
    
  }
  report_status_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), report_status);
  // @@protoc_insertion_point(field_set_allocated:subt.msgs.ArtifactScore.report_status)
}

// optional int32 score_change = 7;
void ArtifactScore::clear_score_change() {
  score_change_ = 0;
}
 ::google::protobuf::int32 ArtifactScore::score_change() const {
  // @@protoc_insertion_point(field_get:subt.msgs.ArtifactScore.score_change)
  return score_change_;
}
 void ArtifactScore::set_score_change(::google::protobuf::int32 value) {
  
  score_change_ = value;
  // @@protoc_insertion_point(field_set:subt.msgs.ArtifactScore.score_change)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace subt

// @@protoc_insertion_point(global_scope)
