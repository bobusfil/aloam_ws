// Generated by gencpp from file subt_msgs/DatagramRosRequest.msg
// DO NOT EDIT!


#ifndef SUBT_MSGS_MESSAGE_DATAGRAMROSREQUEST_H
#define SUBT_MSGS_MESSAGE_DATAGRAMROSREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace subt_msgs
{
template <class ContainerAllocator>
struct DatagramRosRequest_
{
  typedef DatagramRosRequest_<ContainerAllocator> Type;

  DatagramRosRequest_()
    : src_address()
    , dst_address()
    , dst_port(0)
    , rssi(0.0)
    , data()  {
    }
  DatagramRosRequest_(const ContainerAllocator& _alloc)
    : src_address(_alloc)
    , dst_address(_alloc)
    , dst_port(0)
    , rssi(0.0)
    , data(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _src_address_type;
  _src_address_type src_address;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _dst_address_type;
  _dst_address_type dst_address;

   typedef uint32_t _dst_port_type;
  _dst_port_type dst_port;

   typedef double _rssi_type;
  _rssi_type rssi;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _data_type;
  _data_type data;





  typedef boost::shared_ptr< ::subt_msgs::DatagramRosRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::subt_msgs::DatagramRosRequest_<ContainerAllocator> const> ConstPtr;

}; // struct DatagramRosRequest_

typedef ::subt_msgs::DatagramRosRequest_<std::allocator<void> > DatagramRosRequest;

typedef boost::shared_ptr< ::subt_msgs::DatagramRosRequest > DatagramRosRequestPtr;
typedef boost::shared_ptr< ::subt_msgs::DatagramRosRequest const> DatagramRosRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::subt_msgs::DatagramRosRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::subt_msgs::DatagramRosRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::subt_msgs::DatagramRosRequest_<ContainerAllocator1> & lhs, const ::subt_msgs::DatagramRosRequest_<ContainerAllocator2> & rhs)
{
  return lhs.src_address == rhs.src_address &&
    lhs.dst_address == rhs.dst_address &&
    lhs.dst_port == rhs.dst_port &&
    lhs.rssi == rhs.rssi &&
    lhs.data == rhs.data;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::subt_msgs::DatagramRosRequest_<ContainerAllocator1> & lhs, const ::subt_msgs::DatagramRosRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace subt_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::subt_msgs::DatagramRosRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::subt_msgs::DatagramRosRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::subt_msgs::DatagramRosRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::subt_msgs::DatagramRosRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::subt_msgs::DatagramRosRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::subt_msgs::DatagramRosRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::subt_msgs::DatagramRosRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9b49f58b9703cbf5a2ea81c4d815a945";
  }

  static const char* value(const ::subt_msgs::DatagramRosRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9b49f58b9703cbf5ULL;
  static const uint64_t static_value2 = 0xa2ea81c4d815a945ULL;
};

template<class ContainerAllocator>
struct DataType< ::subt_msgs::DatagramRosRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "subt_msgs/DatagramRosRequest";
  }

  static const char* value(const ::subt_msgs::DatagramRosRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::subt_msgs::DatagramRosRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# DatagramRos\n"
"\n"
"string src_address\n"
"string dst_address\n"
"uint32 dst_port\n"
"float64 rssi\n"
"string data\n"
;
  }

  static const char* value(const ::subt_msgs::DatagramRosRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::subt_msgs::DatagramRosRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.src_address);
      stream.next(m.dst_address);
      stream.next(m.dst_port);
      stream.next(m.rssi);
      stream.next(m.data);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DatagramRosRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::subt_msgs::DatagramRosRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::subt_msgs::DatagramRosRequest_<ContainerAllocator>& v)
  {
    s << indent << "src_address: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.src_address);
    s << indent << "dst_address: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.dst_address);
    s << indent << "dst_port: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.dst_port);
    s << indent << "rssi: ";
    Printer<double>::stream(s, indent + "  ", v.rssi);
    s << indent << "data: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.data);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SUBT_MSGS_MESSAGE_DATAGRAMROSREQUEST_H
