// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: neighbor_m.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "neighbor_m.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace subt {
namespace msgs {

namespace {

const ::google::protobuf::Descriptor* Neighbor_M_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Neighbor_M_reflection_ = NULL;
const ::google::protobuf::Descriptor* Neighbor_M_NeighborsEntry_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_neighbor_5fm_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_neighbor_5fm_2eproto() {
  protobuf_AddDesc_neighbor_5fm_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "neighbor_m.proto");
  GOOGLE_CHECK(file != NULL);
  Neighbor_M_descriptor_ = file->message_type(0);
  static const int Neighbor_M_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Neighbor_M, neighbors_),
  };
  Neighbor_M_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Neighbor_M_descriptor_,
      Neighbor_M::default_instance_,
      Neighbor_M_offsets_,
      -1,
      -1,
      -1,
      sizeof(Neighbor_M),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Neighbor_M, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Neighbor_M, _is_default_instance_));
  Neighbor_M_NeighborsEntry_descriptor_ = Neighbor_M_descriptor_->nested_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_neighbor_5fm_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Neighbor_M_descriptor_, &Neighbor_M::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        Neighbor_M_NeighborsEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::ignition::msgs::StringMsg_V,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
            0>::CreateDefaultInstance(
                Neighbor_M_NeighborsEntry_descriptor_));
}

}  // namespace

void protobuf_ShutdownFile_neighbor_5fm_2eproto() {
  delete Neighbor_M::default_instance_;
  delete Neighbor_M_reflection_;
}

void protobuf_AddDesc_neighbor_5fm_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_neighbor_5fm_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::ignition::msgs::protobuf_AddDesc_ignition_2fmsgs_2fstringmsg_5fv_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020neighbor_m.proto\022\tsubt.msgs\032\037ignition/"
    "msgs/stringmsg_v.proto\"\223\001\n\nNeighbor_M\0227\n"
    "\tneighbors\030\001 \003(\0132$.subt.msgs.Neighbor_M."
    "NeighborsEntry\032L\n\016NeighborsEntry\022\013\n\003key\030"
    "\001 \001(\t\022)\n\005value\030\002 \001(\0132\032.ignition.msgs.Str"
    "ingMsg_V:\0028\001b\006proto3", 220);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "neighbor_m.proto", &protobuf_RegisterTypes);
  Neighbor_M::default_instance_ = new Neighbor_M();
  Neighbor_M::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_neighbor_5fm_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_neighbor_5fm_2eproto {
  StaticDescriptorInitializer_neighbor_5fm_2eproto() {
    protobuf_AddDesc_neighbor_5fm_2eproto();
  }
} static_descriptor_initializer_neighbor_5fm_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Neighbor_M::kNeighborsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Neighbor_M::Neighbor_M()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:subt.msgs.Neighbor_M)
}

void Neighbor_M::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Neighbor_M::Neighbor_M(const Neighbor_M& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:subt.msgs.Neighbor_M)
}

void Neighbor_M::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  neighbors_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  neighbors_.SetEntryDescriptor(
      &::subt::msgs::Neighbor_M_NeighborsEntry_descriptor_);
}

Neighbor_M::~Neighbor_M() {
  // @@protoc_insertion_point(destructor:subt.msgs.Neighbor_M)
  SharedDtor();
}

void Neighbor_M::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Neighbor_M::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Neighbor_M::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Neighbor_M_descriptor_;
}

const Neighbor_M& Neighbor_M::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_neighbor_5fm_2eproto();
  return *default_instance_;
}

Neighbor_M* Neighbor_M::default_instance_ = NULL;

Neighbor_M* Neighbor_M::New(::google::protobuf::Arena* arena) const {
  Neighbor_M* n = new Neighbor_M;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Neighbor_M::Clear() {
// @@protoc_insertion_point(message_clear_start:subt.msgs.Neighbor_M)
  neighbors_.Clear();
}

bool Neighbor_M::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:subt.msgs.Neighbor_M)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<string, .ignition.msgs.StringMsg_V> neighbors = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_neighbors:
          Neighbor_M_NeighborsEntry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, ::ignition::msgs::StringMsg_V,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::ignition::msgs::StringMsg_V > > parser(&neighbors_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "subt.msgs.Neighbor_M.NeighborsEntry.key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_neighbors;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:subt.msgs.Neighbor_M)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:subt.msgs.Neighbor_M)
  return false;
#undef DO_
}

void Neighbor_M::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:subt.msgs.Neighbor_M)
  // map<string, .ignition.msgs.StringMsg_V> neighbors = 1;
  if (!this->neighbors().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::ignition::msgs::StringMsg_V >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "subt.msgs.Neighbor_M.NeighborsEntry.key");
      }
    };

    if (output->IsSerializationDeterminstic() &&
        this->neighbors().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->neighbors().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::ignition::msgs::StringMsg_V >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::ignition::msgs::StringMsg_V >::const_iterator
          it = this->neighbors().begin();
          it != this->neighbors().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<Neighbor_M_NeighborsEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(neighbors_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<Neighbor_M_NeighborsEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::ignition::msgs::StringMsg_V >::const_iterator
          it = this->neighbors().begin();
          it != this->neighbors().end(); ++it) {
        entry.reset(neighbors_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // @@protoc_insertion_point(serialize_end:subt.msgs.Neighbor_M)
}

::google::protobuf::uint8* Neighbor_M::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:subt.msgs.Neighbor_M)
  // map<string, .ignition.msgs.StringMsg_V> neighbors = 1;
  if (!this->neighbors().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::ignition::msgs::StringMsg_V >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "subt.msgs.Neighbor_M.NeighborsEntry.key");
      }
    };

    if (deterministic &&
        this->neighbors().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->neighbors().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::ignition::msgs::StringMsg_V >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::ignition::msgs::StringMsg_V >::const_iterator
          it = this->neighbors().begin();
          it != this->neighbors().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<Neighbor_M_NeighborsEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(neighbors_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<Neighbor_M_NeighborsEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::ignition::msgs::StringMsg_V >::const_iterator
          it = this->neighbors().begin();
          it != this->neighbors().end(); ++it) {
        entry.reset(neighbors_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // @@protoc_insertion_point(serialize_to_array_end:subt.msgs.Neighbor_M)
  return target;
}

int Neighbor_M::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:subt.msgs.Neighbor_M)
  int total_size = 0;

  // map<string, .ignition.msgs.StringMsg_V> neighbors = 1;
  total_size += 1 * this->neighbors_size();
  {
    ::google::protobuf::scoped_ptr<Neighbor_M_NeighborsEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::ignition::msgs::StringMsg_V >::const_iterator
        it = this->neighbors().begin();
        it != this->neighbors().end(); ++it) {
      entry.reset(neighbors_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Neighbor_M::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:subt.msgs.Neighbor_M)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Neighbor_M* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Neighbor_M>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:subt.msgs.Neighbor_M)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:subt.msgs.Neighbor_M)
    MergeFrom(*source);
  }
}

void Neighbor_M::MergeFrom(const Neighbor_M& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:subt.msgs.Neighbor_M)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  neighbors_.MergeFrom(from.neighbors_);
}

void Neighbor_M::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:subt.msgs.Neighbor_M)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Neighbor_M::CopyFrom(const Neighbor_M& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:subt.msgs.Neighbor_M)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Neighbor_M::IsInitialized() const {

  return true;
}

void Neighbor_M::Swap(Neighbor_M* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Neighbor_M::InternalSwap(Neighbor_M* other) {
  neighbors_.Swap(&other->neighbors_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Neighbor_M::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Neighbor_M_descriptor_;
  metadata.reflection = Neighbor_M_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Neighbor_M

// map<string, .ignition.msgs.StringMsg_V> neighbors = 1;
int Neighbor_M::neighbors_size() const {
  return neighbors_.size();
}
void Neighbor_M::clear_neighbors() {
  neighbors_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::ignition::msgs::StringMsg_V >&
Neighbor_M::neighbors() const {
  // @@protoc_insertion_point(field_map:subt.msgs.Neighbor_M.neighbors)
  return neighbors_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::ignition::msgs::StringMsg_V >*
Neighbor_M::mutable_neighbors() {
  // @@protoc_insertion_point(field_mutable_map:subt.msgs.Neighbor_M.neighbors)
  return neighbors_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace subt

// @@protoc_insertion_point(global_scope)
