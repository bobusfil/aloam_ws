# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from subt_ros/ArtifactReport.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy
import geometry_msgs.msg

class ArtifactReport(genpy.Message):
  _md5sum = "a279235b85d5915ce86aa46d2e31f07d"
  _type = "subt_ros/ArtifactReport"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# An artifact report received from the competing team and associated scoring metrics. Includes only properly-formatted and non-duplicate reports.

time timestamp 					# time since sim bootup
string reported_artifact_type			# artifact type from the report
geometry_msgs/Point reported_artifact_position	# artifact position from the report
string closest_artifact_name			# model name of the nearest artifact, e.g., backpack_4
float64 distance				# distance to nearest artifact [m]
int32 points_scored				# points scored in this attempt
int32 total_score				# resulting total score after scoring this attempt

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z
"""
  __slots__ = ['timestamp','reported_artifact_type','reported_artifact_position','closest_artifact_name','distance','points_scored','total_score']
  _slot_types = ['time','string','geometry_msgs/Point','string','float64','int32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       timestamp,reported_artifact_type,reported_artifact_position,closest_artifact_name,distance,points_scored,total_score

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ArtifactReport, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.timestamp is None:
        self.timestamp = genpy.Time()
      if self.reported_artifact_type is None:
        self.reported_artifact_type = ''
      if self.reported_artifact_position is None:
        self.reported_artifact_position = geometry_msgs.msg.Point()
      if self.closest_artifact_name is None:
        self.closest_artifact_name = ''
      if self.distance is None:
        self.distance = 0.
      if self.points_scored is None:
        self.points_scored = 0
      if self.total_score is None:
        self.total_score = 0
    else:
      self.timestamp = genpy.Time()
      self.reported_artifact_type = ''
      self.reported_artifact_position = geometry_msgs.msg.Point()
      self.closest_artifact_name = ''
      self.distance = 0.
      self.points_scored = 0
      self.total_score = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2I().pack(_x.timestamp.secs, _x.timestamp.nsecs))
      _x = self.reported_artifact_type
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3d().pack(_x.reported_artifact_position.x, _x.reported_artifact_position.y, _x.reported_artifact_position.z))
      _x = self.closest_artifact_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_d2i().pack(_x.distance, _x.points_scored, _x.total_score))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.timestamp is None:
        self.timestamp = genpy.Time()
      if self.reported_artifact_position is None:
        self.reported_artifact_position = geometry_msgs.msg.Point()
      end = 0
      _x = self
      start = end
      end += 8
      (_x.timestamp.secs, _x.timestamp.nsecs,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.reported_artifact_type = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.reported_artifact_type = str[start:end]
      _x = self
      start = end
      end += 24
      (_x.reported_artifact_position.x, _x.reported_artifact_position.y, _x.reported_artifact_position.z,) = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.closest_artifact_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.closest_artifact_name = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.distance, _x.points_scored, _x.total_score,) = _get_struct_d2i().unpack(str[start:end])
      self.timestamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2I().pack(_x.timestamp.secs, _x.timestamp.nsecs))
      _x = self.reported_artifact_type
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3d().pack(_x.reported_artifact_position.x, _x.reported_artifact_position.y, _x.reported_artifact_position.z))
      _x = self.closest_artifact_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_d2i().pack(_x.distance, _x.points_scored, _x.total_score))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.timestamp is None:
        self.timestamp = genpy.Time()
      if self.reported_artifact_position is None:
        self.reported_artifact_position = geometry_msgs.msg.Point()
      end = 0
      _x = self
      start = end
      end += 8
      (_x.timestamp.secs, _x.timestamp.nsecs,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.reported_artifact_type = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.reported_artifact_type = str[start:end]
      _x = self
      start = end
      end += 24
      (_x.reported_artifact_position.x, _x.reported_artifact_position.y, _x.reported_artifact_position.z,) = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.closest_artifact_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.closest_artifact_name = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.distance, _x.points_scored, _x.total_score,) = _get_struct_d2i().unpack(str[start:end])
      self.timestamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_d2i = None
def _get_struct_d2i():
    global _struct_d2i
    if _struct_d2i is None:
        _struct_d2i = struct.Struct("<d2i")
    return _struct_d2i
