// Generated by gencpp from file subt_ros/RunStatus.msg
// DO NOT EDIT!


#ifndef SUBT_ROS_MESSAGE_RUNSTATUS_H
#define SUBT_ROS_MESSAGE_RUNSTATUS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace subt_ros
{
template <class ContainerAllocator>
struct RunStatus_
{
  typedef RunStatus_<ContainerAllocator> Type;

  RunStatus_()
    : status()
    , timestamp()  {
    }
  RunStatus_(const ContainerAllocator& _alloc)
    : status(_alloc)
    , timestamp()  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _status_type;
  _status_type status;

   typedef ros::Time _timestamp_type;
  _timestamp_type timestamp;





  typedef boost::shared_ptr< ::subt_ros::RunStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::subt_ros::RunStatus_<ContainerAllocator> const> ConstPtr;

}; // struct RunStatus_

typedef ::subt_ros::RunStatus_<std::allocator<void> > RunStatus;

typedef boost::shared_ptr< ::subt_ros::RunStatus > RunStatusPtr;
typedef boost::shared_ptr< ::subt_ros::RunStatus const> RunStatusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::subt_ros::RunStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::subt_ros::RunStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::subt_ros::RunStatus_<ContainerAllocator1> & lhs, const ::subt_ros::RunStatus_<ContainerAllocator2> & rhs)
{
  return lhs.status == rhs.status &&
    lhs.timestamp == rhs.timestamp;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::subt_ros::RunStatus_<ContainerAllocator1> & lhs, const ::subt_ros::RunStatus_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace subt_ros

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::subt_ros::RunStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::subt_ros::RunStatus_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::subt_ros::RunStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::subt_ros::RunStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::subt_ros::RunStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::subt_ros::RunStatus_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::subt_ros::RunStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "60bdfc109e36396a6221873ebe3c3f0c";
  }

  static const char* value(const ::subt_ros::RunStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x60bdfc109e36396aULL;
  static const uint64_t static_value2 = 0x6221873ebe3c3f0cULL;
};

template<class ContainerAllocator>
struct DataType< ::subt_ros::RunStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "subt_ros/RunStatus";
  }

  static const char* value(const ::subt_ros::RunStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::subt_ros::RunStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Indicator of when the run phase changes\n"
"\n"
"string status		# name of the current phase (setup, run, finished)\n"
"time timestamp		# time since sim bootup\n"
;
  }

  static const char* value(const ::subt_ros::RunStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::subt_ros::RunStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.status);
      stream.next(m.timestamp);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RunStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::subt_ros::RunStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::subt_ros::RunStatus_<ContainerAllocator>& v)
  {
    s << indent << "status: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.status);
    s << indent << "timestamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.timestamp);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SUBT_ROS_MESSAGE_RUNSTATUS_H
