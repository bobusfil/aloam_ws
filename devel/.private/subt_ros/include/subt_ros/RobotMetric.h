// Generated by gencpp from file subt_ros/RobotMetric.msg
// DO NOT EDIT!


#ifndef SUBT_ROS_MESSAGE_ROBOTMETRIC_H
#define SUBT_ROS_MESSAGE_ROBOTMETRIC_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace subt_ros
{
template <class ContainerAllocator>
struct RobotMetric_
{
  typedef RobotMetric_<ContainerAllocator> Type;

  RobotMetric_()
    : data(0.0)
    , name()  {
    }
  RobotMetric_(const ContainerAllocator& _alloc)
    : data(0.0)
    , name(_alloc)  {
  (void)_alloc;
    }



   typedef double _data_type;
  _data_type data;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _name_type;
  _name_type name;





  typedef boost::shared_ptr< ::subt_ros::RobotMetric_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::subt_ros::RobotMetric_<ContainerAllocator> const> ConstPtr;

}; // struct RobotMetric_

typedef ::subt_ros::RobotMetric_<std::allocator<void> > RobotMetric;

typedef boost::shared_ptr< ::subt_ros::RobotMetric > RobotMetricPtr;
typedef boost::shared_ptr< ::subt_ros::RobotMetric const> RobotMetricConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::subt_ros::RobotMetric_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::subt_ros::RobotMetric_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::subt_ros::RobotMetric_<ContainerAllocator1> & lhs, const ::subt_ros::RobotMetric_<ContainerAllocator2> & rhs)
{
  return lhs.data == rhs.data &&
    lhs.name == rhs.name;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::subt_ros::RobotMetric_<ContainerAllocator1> & lhs, const ::subt_ros::RobotMetric_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace subt_ros

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::subt_ros::RobotMetric_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::subt_ros::RobotMetric_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::subt_ros::RobotMetric_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::subt_ros::RobotMetric_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::subt_ros::RobotMetric_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::subt_ros::RobotMetric_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::subt_ros::RobotMetric_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5f82ca844447b05e7468ea40193c76fc";
  }

  static const char* value(const ::subt_ros::RobotMetric_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5f82ca844447b05eULL;
  static const uint64_t static_value2 = 0x7468ea40193c76fcULL;
};

template<class ContainerAllocator>
struct DataType< ::subt_ros::RobotMetric_<ContainerAllocator> >
{
  static const char* value()
  {
    return "subt_ros/RobotMetric";
  }

  static const char* value(const ::subt_ros::RobotMetric_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::subt_ros::RobotMetric_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# A run statistics metric for an individual robot\n"
"\n"
"float64 data	# the numerical metric\n"
"string name	# name of the robot the metric is associated with\n"
;
  }

  static const char* value(const ::subt_ros::RobotMetric_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::subt_ros::RobotMetric_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.data);
      stream.next(m.name);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RobotMetric_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::subt_ros::RobotMetric_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::subt_ros::RobotMetric_<ContainerAllocator>& v)
  {
    s << indent << "data: ";
    Printer<double>::stream(s, indent + "  ", v.data);
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SUBT_ROS_MESSAGE_ROBOTMETRIC_H
