// Generated by gencpp from file subt_ros/RegionEvent.msg
// DO NOT EDIT!


#ifndef SUBT_ROS_MESSAGE_REGIONEVENT_H
#define SUBT_ROS_MESSAGE_REGIONEVENT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace subt_ros
{
template <class ContainerAllocator>
struct RegionEvent_
{
  typedef RegionEvent_<ContainerAllocator> Type;

  RegionEvent_()
    : timestamp()
    , event_type()
    , robot_name()
    , detector()
    , state()
    , event_id(0)  {
    }
  RegionEvent_(const ContainerAllocator& _alloc)
    : timestamp()
    , event_type(_alloc)
    , robot_name(_alloc)
    , detector(_alloc)
    , state(_alloc)
    , event_id(0)  {
  (void)_alloc;
    }



   typedef ros::Time _timestamp_type;
  _timestamp_type timestamp;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _event_type_type;
  _event_type_type event_type;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _robot_name_type;
  _robot_name_type robot_name;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _detector_type;
  _detector_type detector;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _state_type;
  _state_type state;

   typedef int32_t _event_id_type;
  _event_id_type event_id;





  typedef boost::shared_ptr< ::subt_ros::RegionEvent_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::subt_ros::RegionEvent_<ContainerAllocator> const> ConstPtr;

}; // struct RegionEvent_

typedef ::subt_ros::RegionEvent_<std::allocator<void> > RegionEvent;

typedef boost::shared_ptr< ::subt_ros::RegionEvent > RegionEventPtr;
typedef boost::shared_ptr< ::subt_ros::RegionEvent const> RegionEventConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::subt_ros::RegionEvent_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::subt_ros::RegionEvent_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::subt_ros::RegionEvent_<ContainerAllocator1> & lhs, const ::subt_ros::RegionEvent_<ContainerAllocator2> & rhs)
{
  return lhs.timestamp == rhs.timestamp &&
    lhs.event_type == rhs.event_type &&
    lhs.robot_name == rhs.robot_name &&
    lhs.detector == rhs.detector &&
    lhs.state == rhs.state &&
    lhs.event_id == rhs.event_id;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::subt_ros::RegionEvent_<ContainerAllocator1> & lhs, const ::subt_ros::RegionEvent_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace subt_ros

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::subt_ros::RegionEvent_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::subt_ros::RegionEvent_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::subt_ros::RegionEvent_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::subt_ros::RegionEvent_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::subt_ros::RegionEvent_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::subt_ros::RegionEvent_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::subt_ros::RegionEvent_<ContainerAllocator> >
{
  static const char* value()
  {
    return "da37de6c7e31295b32b1fd365570b43a";
  }

  static const char* value(const ::subt_ros::RegionEvent_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xda37de6c7e31295bULL;
  static const uint64_t static_value2 = 0x32b1fd365570b43aULL;
};

template<class ContainerAllocator>
struct DataType< ::subt_ros::RegionEvent_<ContainerAllocator> >
{
  static const char* value()
  {
    return "subt_ros/RegionEvent";
  }

  static const char* value(const ::subt_ros::RegionEvent_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::subt_ros::RegionEvent_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# An event representing robot entry/exit from an interesting region.\n"
"\n"
"time timestamp		# time since sim bootup\n"
"string event_type	# type of event (artifact_proximity, vertical, decision, elevation, detect, rock_fall)\n"
"string robot_name	# name of the robot that triggered the event\n"
"string detector		# model name defining the detector region (e.g., backpack_1 for an artifact_proximity event, tile_2 for a vertical/decision/elevation event, medium_rocks_1 for a rock_fall event) \n"
"string state		# enter or exit, represents whether the robot is entering or leaving the region\n"
"int32 event_id		# Unique ID of the event\n"
;
  }

  static const char* value(const ::subt_ros::RegionEvent_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::subt_ros::RegionEvent_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.timestamp);
      stream.next(m.event_type);
      stream.next(m.robot_name);
      stream.next(m.detector);
      stream.next(m.state);
      stream.next(m.event_id);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RegionEvent_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::subt_ros::RegionEvent_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::subt_ros::RegionEvent_<ContainerAllocator>& v)
  {
    s << indent << "timestamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.timestamp);
    s << indent << "event_type: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.event_type);
    s << indent << "robot_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.robot_name);
    s << indent << "detector: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.detector);
    s << indent << "state: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.state);
    s << indent << "event_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.event_id);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SUBT_ROS_MESSAGE_REGIONEVENT_H
