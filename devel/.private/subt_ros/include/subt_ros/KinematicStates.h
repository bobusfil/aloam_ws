// Generated by gencpp from file subt_ros/KinematicStates.msg
// DO NOT EDIT!


#ifndef SUBT_ROS_MESSAGE_KINEMATICSTATES_H
#define SUBT_ROS_MESSAGE_KINEMATICSTATES_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Pose.h>
#include <geometry_msgs/Vector3.h>

namespace subt_ros
{
template <class ContainerAllocator>
struct KinematicStates_
{
  typedef KinematicStates_<ContainerAllocator> Type;

  KinematicStates_()
    : header()
    , pose()
    , velocity()
    , speed(0.0)  {
    }
  KinematicStates_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , pose(_alloc)
    , velocity(_alloc)
    , speed(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _pose_type;
  _pose_type pose;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _velocity_type;
  _velocity_type velocity;

   typedef double _speed_type;
  _speed_type speed;





  typedef boost::shared_ptr< ::subt_ros::KinematicStates_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::subt_ros::KinematicStates_<ContainerAllocator> const> ConstPtr;

}; // struct KinematicStates_

typedef ::subt_ros::KinematicStates_<std::allocator<void> > KinematicStates;

typedef boost::shared_ptr< ::subt_ros::KinematicStates > KinematicStatesPtr;
typedef boost::shared_ptr< ::subt_ros::KinematicStates const> KinematicStatesConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::subt_ros::KinematicStates_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::subt_ros::KinematicStates_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::subt_ros::KinematicStates_<ContainerAllocator1> & lhs, const ::subt_ros::KinematicStates_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.pose == rhs.pose &&
    lhs.velocity == rhs.velocity &&
    lhs.speed == rhs.speed;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::subt_ros::KinematicStates_<ContainerAllocator1> & lhs, const ::subt_ros::KinematicStates_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace subt_ros

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::subt_ros::KinematicStates_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::subt_ros::KinematicStates_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::subt_ros::KinematicStates_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::subt_ros::KinematicStates_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::subt_ros::KinematicStates_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::subt_ros::KinematicStates_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::subt_ros::KinematicStates_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ef842508f09fe8514da74071a38acf54";
  }

  static const char* value(const ::subt_ros::KinematicStates_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xef842508f09fe851ULL;
  static const uint64_t static_value2 = 0x4da74071a38acf54ULL;
};

template<class ContainerAllocator>
struct DataType< ::subt_ros::KinematicStates_<ContainerAllocator> >
{
  static const char* value()
  {
    return "subt_ros/KinematicStates";
  }

  static const char* value(const ::subt_ros::KinematicStates_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::subt_ros::KinematicStates_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Position, velocity, and speed for a robot relative to the artifact origin. Updated when the robot moves > 1 m.\n"
"\n"
"std_msgs/Header header			# sequence number, time since sim bootup, and coordinate frame\n"
"geometry_msgs/Pose pose			# position and orientation of the robot\n"
"geometry_msgs/Vector3 velocity		# velocity of the robot\n"
"float64 speed				# speed of the robot (magnitude of the velocity vector)\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::subt_ros::KinematicStates_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::subt_ros::KinematicStates_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.pose);
      stream.next(m.velocity);
      stream.next(m.speed);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct KinematicStates_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::subt_ros::KinematicStates_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::subt_ros::KinematicStates_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.pose);
    s << indent << "velocity: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.velocity);
    s << indent << "speed: ";
    Printer<double>::stream(s, indent + "  ", v.speed);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SUBT_ROS_MESSAGE_KINEMATICSTATES_H
